# -*- coding: utf-8 -*-
from PyQt4.QtGui import *
from PyQt4 import QtGui
from PyQt4.QtCore import *
from selenium import webdriver
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QT as NavigationToolbar
from bs4 import BeautifulSoup
import numpy as np
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import StaleElementReferenceException
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
import sys

# This is the python code that auto generated by the ui file from QtDesigner.
import table_example

import os
import re


# Stm32f103c8t6
class taobao:
    # check the exists of class name
    def check_exists_by_class_name(self,driver, class_name):
        try:
            driver.find_element_by_class_name(class_name)
        except NoSuchElementException:
            return False
        return True

    # Search for the input textbox for searching item.
    def search_item_in_shop_page(self,driver, item):
        # get the search textbox from the shop website
        search = driver.find_element_by_name("q")

        # Press the button to search the item in the shop website.
        search_button = driver.find_element_by_xpath("//*[contains(text(), '搜本店')]")
        for n in range(3):
            try:
                # Click on the textbox before sending the item text.
                search.click()
                search.send_keys(item)
                driver.implicitly_wait(30)
                search_button.click()
                driver.implicitly_wait(30)
                break
            except StaleElementReferenceException:
                #print n
                driver.refresh()

    # The main function of taobao class, used to get the infromation of item price and shop link.
    def getPrice(self, item):
        # create a new Chrome session
        driver = webdriver.Chrome()
        driver.implicitly_wait(30)

        # navigate to the taobao home page
        driver.get("https://login.taobao.com/member/login.jhtml?spm=a21wu.241046-my.754894437.1.4519fd50dPXaMM&f=top&redirectURL=https%3A%2F%2Fworld.taobao.com%2F%3Fspm%3Da21bp.8077467.1417485807582.1.6449e6bcStIj9X")

        # login to Taobao website
        username = driver.find_element_by_id("TPL_username_1")
        password = driver.find_element_by_id("TPL_password_1")
        username.send_keys("yenng3")
        password.send_keys("12345678abc")
        login = driver.find_element_by_id("J_SubmitStatic")
        login.click()
         
        # get the search textbox
        search_field = driver.find_element_by_name("q")
         
        # enter search keyword and submit
        search_field.send_keys(item)
        search_field.submit()
        driver.implicitly_wait(30)

        # reached item searching page
        # get the all areas that linked to the seller page and store these informations into shop[] array.
        shop = driver.find_elements_by_xpath("//div[@class='shop']")

        # declare a new array to store the shop name.
        self.shop_name = []

        # declare a new array to store all the item price.
        self.item_price_all = []

        # declare a new array to store item price for related shop.
        # For example, item price for shop[1] will be stored in item_price_list[1]
        item_price_list = []

        # loop through all the shop and delete the repeated shop.
        for k in range(len(shop)):
            # get the html code within the area that got above
            shop_html = shop[k].get_attribute('innerHTML')

            # parse the html using beautifulsoup
            s = BeautifulSoup(shop_html,'html.parser')

            # get the seller's shop name
            for shop_span in s.find_all('span'):
                if(shop_span.get('class')== None):
                    self.shop_name.append(shop_span.string)
                    # check whether the shop name is repeated
                    for j in range(len(self.shop_name)-1):
                        # if the shop name was repeated, delete it from the array.
                        if(shop_span.string == self.shop_name[j]):
                            del self.shop_name[-1]

        # declare a new array to store the link of the shop.
        self.linkList = []
        
        for i in range(len(self.shop_name)):
            #print shop_name
            print "Shop name: ", self.shop_name[i]
            # navigate to the seller's shop website
            shop[i].click()

            # switch the handling window to shop website
            driver.switch_to_window(driver.window_handles[1])

            # print the shop website url
            print 'Link:    ', driver.current_url
            driver.implicitly_wait(30)

            # save the website url into array
            self.linkList.append(str(driver.current_url))

            # Taobao lastest website design doesn't required the button to search the item for the shop only,
            # this code is used to change the taobao website back to old interface for searching item in the shop website
            if(driver.current_url.find("tmall")==-1):
                url = driver.current_url
                pos = url.find(".taobao")
                url = url[:pos] + ".world" + url[pos:]
                driver.get(url)
                driver.implicitly_wait(30)

            # call the function to search for the item in shop.
            self.search_item_in_shop_page(driver, item)
            
            # switch the handling window to item searching page of shop website
            driver.switch_to_window(driver.window_handles[1])

            # get the area of the item list
            # This handle taobao webside
            if(driver.current_url.find("tmall")==-1):
                if (self.check_exists_by_class_name(driver, "item3line1")):
                    searchedItem = driver.find_element_by_class_name("item3line1")
                else:
                    searchedItem = driver.find_element_by_class_name("item4line1")
            # This handle tmall webside
            else:
                if (self.check_exists_by_class_name(driver, "item5line1")):
                    searchedItem = driver.find_element_by_class_name("item5line1")
                else:
                    searchedItem = driver.find_element_by_class_name("item4line1")
            
            # get the html code of the area that found
            item_html = searchedItem.get_attribute('innerHTML')

            # declare a new array to store the item price for current shop
            item_price = []

            # parse the html using beautifulsoup
            soup = BeautifulSoup(item_html,'html.parser')

            # find all the item price 
            for span in soup.find_all('span'):
                if(span.get('class')==[u'c-price']):
                    # remove extra white space with strip() 
                    item_price.append(float(span.string.strip()))
                    self.item_price_all.append(item_price[-1])

            # print the items' price
            print "Price: ", item_price
            # Store the item price for current shop into item_price_list
            item_price_list.append(item_price)

            # close the current window (shop website)
            # and return to the search page
            driver.close()
            driver.switch_to_window(driver.window_handles[0])

        # Make the item_price_list viewable by other function that call this class.
        self.item_price_list = item_price_list


# This class used to create the GUI that show the table that display the item information and
# plot a graph according to the information,
class ExampleTable(QtGui.QDialog, table_example.Ui_Dialog):
    def __init__(self):
        super(self.__class__,self).__init__()
        self.setupUi(self)

        # create a figure
        self.figure = plt.figure(1)

        # create a canvas widget to display the figure
        self.canvas = FigureCanvas(self.figure)

        # add the canvas widget into the layout
        self.verticalLayout.addWidget(self.canvas)

        # set the row and coloumn number for the table
        self.tableWidget.setRowCount(1)
        self.tableWidget.setColumnCount(3)

        # When 'plot' button is clicked, plot() function will be called
        self.Plot.clicked.connect(self.plot)

        # When 'getData' button is clicked, data() function will be called
        self.getData.clicked.connect(self.data)

        # When 'confirm' button is clicked, Confirm() function will be called
        self.confirm.clicked.connect(self.Confirm)

    # This function used to store the item name and display the title of the table.
    def Confirm(self):
        title = QStringList()
        shop_title = QString('Shop Name')
        item_title = QString(self.itemInput.text())
        link_title = QString('Link')
        title.append(shop_title)
        title.append(item_title)
        title.append(link_title)

        # display the title on the table.
        self.tableWidget.setHorizontalHeaderLabels(title)
        self.item = str(self.itemInput.text())


    # This function used to call getPrice() from taobao class and
    # display the information that obtained on the table.
    def data(self):
        tb = taobao()
        tb.getPrice(self.item)

        
        for i in range(len(tb.shop_name)):
            # Expand the table size according to the number of shops.
            if(self.tableWidget.rowCount() == i):
                self.tableWidget.insertRow(int(self.tableWidget.rowCount()))
            self.tableWidget.setItem(i,0, QTableWidgetItem(tb.shop_name[i]))
            x = tb.item_price_list[i]
            price = ""
            for j in range(len(x)):
                price = price +" " + str(x[j])

            # display the shop, price and url
            self.tableWidget.setItem(i,1, QTableWidgetItem(price))
            self.tableWidget.setItem(i,2, QTableWidgetItem(tb.linkList[i]))

        # get all the item price for plotting the graph
        self.item_price_all = tb.item_price_all

    # This function used to plot a normal distribution graph and display it
    def plot(self):
        x = self.item_price_all

        total = 0

        # set the graph at location (111)
        ax = self.figure.add_subplot(111)

        # if the price changed, the graph can be changed.
        ax.hold(False)
        
        for i in range(len(x)):
            total += x[i]
        avr = total/len(x)
        y = 0
        for i in range(len(x)):
            y += np.square(x[i]-avr)
        sd = np.sqrt(y/len(x))

        n, bins, patches = ax.hist(x, 50, normed=1, facecolor='g', alpha=0.75)
        z = mlab.normpdf(bins, avr, sd)
        ax.axis([0, 200, 0, 0.1])
        ax.plot(bins, z, '--')

        # draw the graph on canvas widget.
        self.canvas.draw()

# The main function run here.
def main():
    app = QtGui.QApplication(sys.argv)
    dialog = ExampleTable()
    dialog.show()
    app.exec_()

if __name__ == '__main__':
    main()
